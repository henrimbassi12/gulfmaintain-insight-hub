
// M√©triques de performance du mod√®le IA bas√©es sur vos donn√©es
const MODEL_METRICS = {
  "Entretien_renforce": { precision: 1.0, recall: 1.0, f1: 1.0, support: 6 },
  "Investigation_defaillance": { precision: 1.0, recall: 0.67, f1: 0.80, support: 3 },
  "Maintenance_preventive": { precision: 0.97, recall: 0.97, f1: 0.97, support: 30 },
  "Surveillance_renforcee": { precision: 0.92, recall: 0.96, f1: 0.94, support: 25 },
};

const GLOBAL_ACCURACY = 0.9531; // 95.31%

export interface EnrichedPredictionMessage {
  title: string;
  description: string;
  confidence: string;
  interpretation: string;
  recommendation?: string;
}

export function formatPredictionMessage(
  predictedClass: string, 
  confidenceScore?: number
): EnrichedPredictionMessage {
  console.log('üîç SERVICE formatPredictionMessage - D√©but du traitement:', { predictedClass, confidenceScore });
  
  const metrics = MODEL_METRICS[predictedClass as keyof typeof MODEL_METRICS];
  const displayName = predictedClass.replace(/_/g, ' ');
  
  console.log('üìä SERVICE - M√©triques trouv√©es:', metrics);
  console.log('üè∑Ô∏è SERVICE - Nom d\'affichage:', displayName);
  
  if (!metrics) {
    console.log('‚ö†Ô∏è SERVICE - Aucune m√©trique trouv√©e, utilisation du message par d√©faut');
    const defaultMessage = {
      title: `Pr√©diction IA : ${displayName}`,
      description: `Bas√©e sur un mod√®le d'intelligence artificielle avec une pr√©cision globale de ${Math.round(GLOBAL_ACCURACY * 100)}%.`,
      confidence: `Confiance : ${confidenceScore || 85}%`,
      interpretation: `Il est probable que le statut post-entretien soit : **${displayName}**.`
    };
    console.log('üì§ SERVICE - Message par d√©faut cr√©√©:', defaultMessage);
    return defaultMessage;
  }

  const precision = Math.round(metrics.precision * 100);
  const recall = Math.round(metrics.recall * 100);
  const f1Score = Math.round(metrics.f1 * 100);

  let recommendation = '';
  switch (predictedClass) {
    case 'Entretien_renforce':
      recommendation = 'üîß Action requise : Planifier un entretien renforc√© pour optimiser les performances de l\'√©quipement.';
      break;
    case 'Investigation_defaillance':
      recommendation = 'üîç Investigation n√©cessaire : Effectuer un diagnostic approfondi pour identifier les causes de d√©faillance.';
      break;
    case 'Maintenance_preventive':
      recommendation = '‚úÖ Maintenance pr√©ventive recommand√©e : Suivre le programme de maintenance standard.';
      break;
    case 'Surveillance_renforcee':
      recommendation = 'üëÅÔ∏è Surveillance renforc√©e : Augmenter la fr√©quence de contr√¥le pour anticiper tout d√©faut critique.';
      break;
  }

  const enrichedMessage = {
    title: `Pr√©diction IA : ${displayName}`,
    description: `Bas√©e sur un mod√®le d'intelligence artificielle affichant une pr√©cision globale de ${Math.round(GLOBAL_ACCURACY * 100)}%, cette pr√©diction repose sur l'analyse de plusieurs crit√®res critiques observ√©s lors des maintenances pr√©c√©dentes.`,
    confidence: `Confiance √©lev√©e : le mod√®le affiche une pr√©cision de ${precision}% pour cette cat√©gorie sp√©cifique, avec un rappel de ${recall}% et un score F1 de ${f1Score}%.`,
    interpretation: `Interpr√©tation : Il est fortement probable que le statut post-entretien soit : **${displayName}**.`,
    recommendation
  };
  
  console.log('‚úÖ SERVICE - Message enrichi cr√©√© avec succ√®s:', enrichedMessage);
  return enrichedMessage;
}

export function getModelPerformanceDetails(predictedClass: string): string {
  console.log('üîç SERVICE getModelPerformanceDetails - Traitement pour:', predictedClass);
  
  const metrics = MODEL_METRICS[predictedClass as keyof typeof MODEL_METRICS];
  
  if (!metrics) {
    const defaultDetails = `Performances du mod√®le : Pr√©cision globale de ${Math.round(GLOBAL_ACCURACY * 100)}%`;
    console.log('üì§ SERVICE - D√©tails par d√©faut des performances:', defaultDetails);
    return defaultDetails;
  }

  const performanceDetails = `‚û°Ô∏è Pour la classe ¬´ ${predictedClass.replace(/_/g, ' ')} ¬ª, les performances du mod√®le sont :
- Pr√©cision : ${Math.round(metrics.precision * 100)}%
- Rappel : ${Math.round(metrics.recall * 100)}%
- F1-Score : ${Math.round(metrics.f1 * 100)}%
- √âchantillons d'entra√Ænement : ${metrics.support}`;

  console.log('üì§ SERVICE - D√©tails des performances cr√©√©s:', performanceDetails);
  return performanceDetails;
}
